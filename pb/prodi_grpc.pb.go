// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: prodi.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProdiService_GetAllProdi_FullMethodName = "/tracer_study_grpc.ProdiService/GetAllProdi"
)

// ProdiServiceClient is the client API for ProdiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProdiServiceClient interface {
	GetAllProdi(ctx context.Context, in *EmptyProdiRequest, opts ...grpc.CallOption) (*GetAllProdiResponse, error)
}

type prodiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProdiServiceClient(cc grpc.ClientConnInterface) ProdiServiceClient {
	return &prodiServiceClient{cc}
}

func (c *prodiServiceClient) GetAllProdi(ctx context.Context, in *EmptyProdiRequest, opts ...grpc.CallOption) (*GetAllProdiResponse, error) {
	out := new(GetAllProdiResponse)
	err := c.cc.Invoke(ctx, ProdiService_GetAllProdi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProdiServiceServer is the server API for ProdiService service.
// All implementations must embed UnimplementedProdiServiceServer
// for forward compatibility
type ProdiServiceServer interface {
	GetAllProdi(context.Context, *EmptyProdiRequest) (*GetAllProdiResponse, error)
	mustEmbedUnimplementedProdiServiceServer()
}

// UnimplementedProdiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProdiServiceServer struct {
}

func (UnimplementedProdiServiceServer) GetAllProdi(context.Context, *EmptyProdiRequest) (*GetAllProdiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProdi not implemented")
}
func (UnimplementedProdiServiceServer) mustEmbedUnimplementedProdiServiceServer() {}

// UnsafeProdiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProdiServiceServer will
// result in compilation errors.
type UnsafeProdiServiceServer interface {
	mustEmbedUnimplementedProdiServiceServer()
}

func RegisterProdiServiceServer(s grpc.ServiceRegistrar, srv ProdiServiceServer) {
	s.RegisterService(&ProdiService_ServiceDesc, srv)
}

func _ProdiService_GetAllProdi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyProdiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdiServiceServer).GetAllProdi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdiService_GetAllProdi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdiServiceServer).GetAllProdi(ctx, req.(*EmptyProdiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProdiService_ServiceDesc is the grpc.ServiceDesc for ProdiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProdiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracer_study_grpc.ProdiService",
	HandlerType: (*ProdiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllProdi",
			Handler:    _ProdiService_GetAllProdi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prodi.proto",
}
