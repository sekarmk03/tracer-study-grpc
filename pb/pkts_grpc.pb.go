// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: pkts.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PKTSService_GetAllPKTS_FullMethodName = "/tracer_study_grpc.PKTSService/GetAllPKTS"
)

// PKTSServiceClient is the client API for PKTSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PKTSServiceClient interface {
	GetAllPKTS(ctx context.Context, in *EmptyPKTSRequest, opts ...grpc.CallOption) (*GetAllPKTSResponse, error)
}

type pKTSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPKTSServiceClient(cc grpc.ClientConnInterface) PKTSServiceClient {
	return &pKTSServiceClient{cc}
}

func (c *pKTSServiceClient) GetAllPKTS(ctx context.Context, in *EmptyPKTSRequest, opts ...grpc.CallOption) (*GetAllPKTSResponse, error) {
	out := new(GetAllPKTSResponse)
	err := c.cc.Invoke(ctx, PKTSService_GetAllPKTS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PKTSServiceServer is the server API for PKTSService service.
// All implementations must embed UnimplementedPKTSServiceServer
// for forward compatibility
type PKTSServiceServer interface {
	GetAllPKTS(context.Context, *EmptyPKTSRequest) (*GetAllPKTSResponse, error)
	mustEmbedUnimplementedPKTSServiceServer()
}

// UnimplementedPKTSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPKTSServiceServer struct {
}

func (UnimplementedPKTSServiceServer) GetAllPKTS(context.Context, *EmptyPKTSRequest) (*GetAllPKTSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPKTS not implemented")
}
func (UnimplementedPKTSServiceServer) mustEmbedUnimplementedPKTSServiceServer() {}

// UnsafePKTSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PKTSServiceServer will
// result in compilation errors.
type UnsafePKTSServiceServer interface {
	mustEmbedUnimplementedPKTSServiceServer()
}

func RegisterPKTSServiceServer(s grpc.ServiceRegistrar, srv PKTSServiceServer) {
	s.RegisterService(&PKTSService_ServiceDesc, srv)
}

func _PKTSService_GetAllPKTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPKTSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PKTSServiceServer).GetAllPKTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PKTSService_GetAllPKTS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PKTSServiceServer).GetAllPKTS(ctx, req.(*EmptyPKTSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PKTSService_ServiceDesc is the grpc.ServiceDesc for PKTSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PKTSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracer_study_grpc.PKTSService",
	HandlerType: (*PKTSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllPKTS",
			Handler:    _PKTSService_GetAllPKTS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkts.proto",
}
